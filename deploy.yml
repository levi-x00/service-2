name: "Hello World CI/CD Pipeline"

on:
  push:
    branches: ["dev", "master"]
  pull_request:
    branches: ["master"]
  workflow_dispatch:

env:
  AWS_VERSION: ${{ vars.AWS_REGION }}
  TASK_DEFINITION: ${{ vars.TASK_DEFINITION }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}

permissions:
  id-token: write
  contents: read

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          pytest test-app.py

  build_image:
    name: Build image
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}
          role-session-name: ${{ secrets.ROLE_SESSION_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login_ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.TASK_DEFINITON }} \
            --query taskDefinition > task-definition.json

      - name: Get commit sha
        id: commit_sha
        run: echo ${{ github.sha }} | cut -c 1-7 >> $GITHUB_OUTPUT

      - name: Build, tag, and push image to Amazon
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  push_image:
    name: Build and Push Image to ECR
    runs-on: ubuntu-latest
    needs: [build_image]
    # if: ${{ github.event_name != 'push' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::YOUR_ACCOUNT_ID:role/github-oidc-provider-aws
          aws-region: us-west-2

      - name: Login to Amazon ECR
        id: login_ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        uses: docker/build-push-action@v6
        with:
          context: ./
          push: true
          tags: ${{ steps.login_ecr.outputs.registry }}/flask-hello-world:latest

  # deploy:
  #   name: Deploy to ECS Fargate
  #   runs-on: ubuntu-latest
  #   needs: build_and_push

  #   permissions:
  #     contents: read
  #     id-token: write

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         role-to-assume: arn:aws:iam::YOUR_ACCOUNT_ID:role/github-oidc-provider-aws
  #         aws-region: us-west-2

  #     - name: Download existing ECS task definition
  #       run: |
  #         aws ecs describe-task-definition --task-definition my-flask-app \
  #           --query taskDefinition > task-definition.json

  #     - name: Update task definition with new image
  #       id: render_task_def
  #       uses: aws-actions/amazon-ecs-render-task-definition@v1
  #       with:
  #         task-definition: task-definition.json
  #         container-name: flask-container
  #         image: ${{ steps.login_ecr.outputs.registry }}/flask-hello-world:latest

  #     - name: Deploy updated task definition
  #       uses: aws-actions/amazon-ecs-deploy-task-definition@v2
  #       with:
  #         task-definition: ${{ steps.render_task_def.outputs.task-definition }}
  #         cluster: my-ecs-cluster
  #         service: my-flask-service
  #         wait-for-service-stability: true
